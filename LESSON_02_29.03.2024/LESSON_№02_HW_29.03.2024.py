# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
 Дата выполнения 29 и 30 МАРТА 2024 года. - Python VERSION
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Домашняя работа
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Курс: Разработка Web приложений на Python, с применением фреймворка Django
Дисциплина: Разработка клиентских сценариев с использованием JavaScript



Домашняя работа № 2. Множественные условия и циклы
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #

Знаете ли вы, что существует вариация созданной на занятии игры, которая называется:
«Rock, paper, scissors, lizard, Spock»! 

Ее правила идентичны «Rock, paper, scissors», однако условия выигрыша немного сложнее.
Давайте дополним код созданной игры так, чтобы пользователю было предложено сделать выбор не из трех,
а из пяти вариантов:

[s] - scissors
[p] - paper
[r] - rock
[l] - lizard
[o] – spock

Добавить цикл while. Добавить счет очков.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Урок от 29.03.2024
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
import random

# Словарь с выборами и правилами выигрыша
choices = {"s": "ножницы", "p": "бумага", "r": "камень", "l": "ящерица", "o": "спок"}
win_conditions = {
    "ножницы": ["бумага", "ящерица"],
    "бумага": ["камень", "спок"],
    "камень": ["ножницы", "ящерица"],
    "ящерица": ["спок", "бумага"],
    "спок": ["ножницы", "камень"]
}
# Функция для получения выбора пользователя
def get_user_choice():
    while True:
        user_input = input("Выберите [s/p/r/l/o] или 'quit' для выхода: ").lower()
        if user_input == 'quit':
            return 'quit'
        if user_input in choices:
            return choices[user_input]
        print("Неверный выбор. Пожалуйста, попробуйте снова.")

# Функция для определения победителя раунда
def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "Ничья", None
    elif computer_choice in win_conditions[user_choice]:
        return f"Вы выиграли! {user_choice} побеждает {computer_choice}.", "user"
    else:
        return f"Компьютер выиграл! {computer_choice} побеждает {user_choice}.", "computer"

# Основная функция игры
def play_game(best_of_n=3):
    player_score = 0
    computer_score = 0
    rounds_played = 0

    while player_score < best_of_n and computer_score < best_of_n:
        user_choice = get_user_choice()
        if user_choice == 'quit':
            break
        computer_choice = random.choice(list(choices.values()))
        print(f"Ваш выбор: {user_choice}. Выбор компьютера: {computer_choice}.")

        result, winner = determine_winner(user_choice, computer_choice)
        print(result)

        if winner == "user":
            player_score += 1
        elif winner == "computer":
            computer_score += 1

        rounds_played += 1
        print(f"Счет: Игрок {player_score} : {computer_score} Компьютер. Раунды: {rounds_played}")

    if player_score > computer_score:
        print("Поздравляем! Вы выиграли игру.")
    elif computer_score > player_score:
        print("К сожалению, компьютер выиграл игру.")
    else:
        print("Игра окончена. Ничья!")

if __name__ == "__main__":
    rounds = int(input("Сколько раундов играть (лучший из N): "))
    play_game(best_of_n=(rounds // 2) + 1)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Этот код включает следующие улучшения:

Функции для упрощения структуры кода: get_user_choice(), determine_winner(), и play_game().
Механизм подсчета очков и игра "лучший из N раундов": 
Пользователь выбирает, сколько раундов будет играться, и игра продолжается до достижения необходимого количества побед.
Подробная обратная связь: Пользователю предоставляется информация о том, почему один выбор победил другой.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
# ------------------------------------------------------------------------------------------------------------------- #
Как мне кажется, и исходя их советов на хабр-хабре и редите - это дает прочную основу для дальнейшего расширения игры,
включая добавление многопользовательского режима, сохранение истории игр и даже графического интерфейса пользователя,
если это желательно.
# ------------------------------------------------------------------------------------------------------------------- #
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
# ------------------------------------------------------------------------------------------------------------------- #
Шаг № 1: Словари choices и win_conditions

Код:

choices = {"s": "ножницы", "p": "бумага", "r": "камень", "l": "ящерица", "o": "спок"}
win_conditions = {
    "ножницы": ["бумага", "ящерица"],
    "бумага": ["камень", "спок"],
    "камень": ["ножницы", "ящерица"],
    "ящерица": ["спок", "бумага"],
    "спок": ["ножницы", "камень"]
}

Описание: 
Здесь определены два словаря. choices представляет собой соответствие между символами,
которые могут вводить пользователи, и полными названиями выборов в игре. win_conditions определяет условия выигрыша
для каждого выбора, указывая, против каких других выборов он побеждает.
# ------------------------------------------------------------------------------------------------------------------- #
Шаг № 2: Функция get_user_choice

Код:

def get_user_choice():
    while True:
        user_input = input("Выберите [s/p/r/l/o] или 'quit' для выхода: ").lower()
        if user_input == 'quit':
            return 'quit'
        if user_input in choices:
            return choices[user_input]
        print("Неверный выбор. Пожалуйста, попробуйте снова.")
        
Описание: 
Эта функция предназначена для получения выбора пользователя. 
Она использует бесконечный цикл while, который продолжается до тех пор, пока пользователь не введет допустимый символ
выбора (s, p, r, l, o) или 'quit' для выхода. 
В случае допустимого ввода возвращает полное название выбора, используя словарь choices.
# ------------------------------------------------------------------------------------------------------------------- #
Шаг № 3: Функция determine_winner

Код:

def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "Ничья", None
    elif computer_choice in win_conditions[user_choice]:
        return f"Вы выиграли! {user_choice} побеждает {computer_choice}.", "user"
    else:
        return f"Компьютер выиграл! {computer_choice} побеждает {user_choice}.", "computer"

Описание: 
Функция определяет победителя текущего раунда. Если выбор пользователя и компьютера совпадают, объявляется ничья.
Иначе, используя словарь win_conditions, проверяется, побеждает ли выбор пользователя выбор компьютера, и на основе
этого определяется победитель.
# ------------------------------------------------------------------------------------------------------------------- #
Шаг № 4: Основная функция play_game

Код:

def play_game(best_of_n=3):
    player_score = 0
    computer_score = 0
    rounds_played = 0

    while player_score < best_of_n and computer_score < best_of_n:
        # Тело функции
        
Описание: 
Основная функция игры, которая принимает количество раундов для победы и запускает игру. 
В цикле while игра продолжается до тех пор, пока один из игроков не наберет необходимое количество побед.
В каждом раунде запрашивается выбор пользователя, генерируется выбор компьютера, определяется победитель раунда,
и счет обновляется.
# ------------------------------------------------------------------------------------------------------------------- #
Шаг № 5: Запуск игры

Код:

if __name__ == "__main__":
    rounds = int(input("Сколько раундов играть (лучший из N): "))
    play_game(best_of_n=(rounds // 2) + 1)

Описание: 
Этот блок кода является точкой входа в программу. Он запрашивает у пользователя, сколько раундов играть,
чтобы определить победителя, и запускает функцию play_game с необходимым количеством побед для завершения игры.
# ------------------------------------------------------------------------------------------------------------------- #
На данном этапе, в варианте написания кода на языке программирования Python, Мы с Вами видим, что каждый из этих шагов
демонстрирует использование функций, словарей, циклов и условных операторов в Python,
а также организацию кода для создания интерактивной игры.
# ------------------------------------------------------------------------------------------------------------------- #
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #