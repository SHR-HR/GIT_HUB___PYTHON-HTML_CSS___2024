# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
 Дата выполнения 29 и 30 МАРТА 2024 года. - Python VERSION
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Практическая работа
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Курс: Разработка Web приложений на Python, с применением фреймворка Django
Дисциплина: Разработка клиентских сценариев с использованием JavaScript



Практическая работа № 2. Множественные условия и циклы
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Вам необходимо самостоятельно решить, для какого задания какой цикл лучше использовать: WHILE, DO WHILE или FOR.
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Задание 1

1. Подсчитать сумму всех чисел в заданном пользователем диапазоне.
2. Запросить 2 числа и найти только наибольший общий делитель.
3. Запросить у пользователя число и вывести все делители этого числа.
4. Определить количество цифр во введенном числе.
5. Запросить у пользователя 10 чисел и подсчитать, сколько он ввел положительных, отрицательных и нулей.
При этом также посчитать, сколько четных и нечетных. Вывести статистику на экран.
Учтите, что достаточно одной переменной (не 10) для ввода чисел пользователем.
6. Зациклить калькулятор. Запросить у пользователя 2 числа и знак, решить пример, вывести результат и спросить,
хочет ли он решить еще один пример. И так до тех пор, пока пользователь не откажется.
7. Зациклить вывод дней недели таким образом: «День недели. Хотите увидеть следующий день?» и так до тех пор,
пока пользователь нажимает OK.
8. Вывести таблицу умножения для всех чисел от 2 до 9. Каждое число необходимо умножить на числа от 1 до 10.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Задание 2

Создание игры Rock, paper, scissors.
Правила просты: каждый пользователь самостоятельно выбирает вариант (камень, ножницы, бумага).
Условия выигрыша: камень затупляет ножницы, бумага накрывает камень, ножницы разрезают бумагу.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Урок от 29.03.2024
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
import random

# Функция для безопасного ввода целых чисел пользователем.
def input_int(message):
    while True:
        try:
            return int(input(message))
        except ValueError:
            print("Пожалуйста, введите корректное целое число.")

# Функция для подсчета суммы всех чисел в заданном пользователем диапазоне.
def sum_in_range():
    start = input_int("Введите начало диапазона: ")
    end = input_int("Введите конец диапазона: ")
    total_sum = sum(range(start, end + 1))
    print(f"Сумма чисел в диапазоне от {start} до {end}: {total_sum}")

# Функция для нахождения наибольшего общего делителя (НОД) двух чисел.
def gcd():
    num1 = input_int("Введите первое число: ")
    num2 = input_int("Введите второе число: ")
    while num2:
        num1, num2 = num2, num1 % num2
    print(f"Наибольший общий делитель: {num1}")

# Функция для вывода всех делителей заданного числа.
def divisors():
    num = input_int("Введите число: ")
    print(f"Делители числа {num}:", end=" ")
    for i in range(1, int(num ** 0.5) + 1):
        if num % i == 0:
            print(i, end=" ")
            if i != num // i:
                print(num // i, end=" ")
    print()

# Функция для определения количества цифр в числе.
def count_digits():
    num = input("Введите число: ")
    # Проверка, является ли ввод числом.
    if num.isdigit():
        print(f"Количество цифр в числе {num}: {len(num)}")
    else:
        print("Введено не число.")

# Функция для подсчета статистики введенных пользователем чисел.
def count_statistics():
    positives = negatives = zeros = evens = odds = 0
    for _ in range(10):
        num = input_int("Введите число: ")
        if num > 0:
            positives += 1
        elif num < 0:
            negatives += 1
        else:
            zeros += 1

        if num % 2 == 0:
            evens += 1
        else:
            odds += 1

    print(
        f"Положительных чисел: {positives}, Отрицательных чисел: {negatives}, Нулей: {zeros}, Четных чисел: {evens}, Нечетных чисел: {odds}")

# Функция калькулятора, поддерживающая основные арифметические операции.
def calculator():
    while True:
        num1 = input_int("Введите первое число: ")
        op = input("Введите оператор (+, -, *, /): ")
        num2 = input_int("Введите второе число: ")
        if op == "+":
            print(f"Результат: {num1 + num2}")
        elif op == "-":
            print(f"Результат: {num1 - num2}")
        elif op == "*":
            print(f"Результат: {num1 * num2}")
        elif op == "/" and num2 != 0:
            print(f"Результат: {num1 / num2}")
        else:
            print("Неверный оператор или попытка деления на ноль.")
        if input("Хотите решить еще один пример? (yes/no): ").lower() != "yes":
            break

# Функция для зацикленного вывода дней недели.
def week_days():
    days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
    index = 0
    while input(f"{days[index]}. Хотите увидеть следующий день? (yes/no): ").lower() == "yes":
        index = (index + 1) % 7

# Функция для вывода таблицы умножения.
def multiplication_table():
    for i in range(2, 10):
        for j in range(1, 11):
            print(f"{i} * {j} = {i * j}")
        print()  # Добавляем пустую строку для разделения таблиц.

# Игра "Камень, ножницы, бумага".
def play_rock_paper_scissors():
    choices = ["камень", "ножницы", "бумага"]
    while True:
        user_choice = input("Выберите камень, ножницы или бумагу: ").lower()
        if user_choice not in choices:
            print("Неверный ввод. Пожалуйста, выберите камень, ножницы или бумагу.")
            continue

        computer_choice = random.choice(choices)
        print(f"Компьютер выбрал: {computer_choice}")
        if user_choice == computer_choice:
            print("Ничья!")
        elif (user_choice == "камень" and computer_choice == "ножницы") or (
                user_choice == "ножницы" and computer_choice == "бумага") or (
                user_choice == "бумага" and computer_choice == "камень"):
            print("Вы победили!")
        else:
            print("Компьютер победил!")

        if input("Хотите сыграть еще раз? (yes/no): ").lower() != "yes":
            break

# Основная функция для запуска программы.
if __name__ == "__main__":
    sum_in_range()
    gcd()
    divisors()
    count_digits()
    count_statistics()
    calculator()
    week_days()
    multiplication_table()
    play_rock_paper_scissors()
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 1: Функция input_int
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def input_int(message):
    while True:
        try:
            return int(input(message))
        except ValueError:
            print("Пожалуйста, введите корректное целое число.")

Пример использования:

age = input_int("Введите ваш возраст: ")

Описание: 
Эта функция бесконечно запрашивает у пользователя ввод, пока не будет введено корректное целое число.
Используется блок try-except для перехвата и обработки исключения ValueError, которое возникает,
если введенное значение не может быть преобразовано в целое число.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 2: Функция sum_in_range
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def sum_in_range():
    start = input_int("Введите начало диапазона: ")
    end = input_int("Введите конец диапазона: ")
    total_sum = sum(range(start, end + 1))
    print(f"Сумма чисел в диапазоне от {start} до {end}: {total_sum}")

Описание: 
Функция сначала запрашивает начало и конец диапазона чисел, затем использует встроенные функции range и sum для
генерации последовательности чисел в этом диапазоне и подсчета их суммы.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 3: Функция gcd
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def gcd():
    num1 = input_int("Введите первое число: ")
    num2 = input_int("Введите второе число: ")
    while num2:
        num1, num2 = num2, num1 % num2
    print(f"Наибольший общий делитель: {num1}")

Описание: 
Функция находит наибольший общий делитель (НОД) двух чисел, используя алгоритм Евклида. 
Числа переопределяются в цикле while, пока второе число не станет равным нулю.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 4: Функция divisors
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def divisors():
    num = input_int("Введите число: ")
    print(f"Делители числа {num}:", end=" ")
    for i in range(1, num + 1):
        if num % i == 0:
            print(i, end=" ")
    print()

Описание: 
Функция перебирает числа от 1 до введенного числа включительно и выводит те из них,
на которые введенное число делится без остатка.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 5: Функция count_digits
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def count_digits():
    num = input("Введите число: ")
    if num.isdigit():
        print(f"Количество цифр в числе {num}: {len(num)}")
    else:
        print("Введено не число.")

Описание: 
Функция проверяет, является ли введенная строка числом с помощью метода .isdigit(), и если да,
выводит количество цифр в этом числе.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 6: Функция count_statistics
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def count_statistics():
    positives = negatives = zeros = evens = odds = 0
    for _ in range(10):
        num = input_int("Введите число: ")
        if num > 0:
            positives += 1
        elif num < 0:
            negatives += 1
        else:
            zeros += 1
        
        if num % 2 == 0:
            evens += 1
        else:
            odds += 1
    
    print(f"Положительных чисел: {positives}, Отрицательных чисел: {negatives},
     Нулей: {zeros}, Четных чисел: {evens}, Нечетных чисел: {odds}")

Описание: 
Функция запрашивает у пользователя 10 чисел и классифицирует их по разным категориям: положительные, отрицательные,
нули, четные и нечетные. После сбора всех данных выводит обобщенную статистику.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 7: Функция calculator
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def calculator():
    while True:
        num1 = input_int("Введите первое число: ")
        op = input("Введите оператор (+, -, *, /): ")
        num2 = input_int("Введите второе число: ")
        if op == "+":
            result = num1 + num2
        elif op == "-":
            result = num1 - num2
        elif op == "*":
            result = num1 * num2
        elif op == "/" and num2 != 0:
            result = num1 / num2
        else:
            print("Неверный оператор или попытка деления на ноль.")
            continue
        print(f"Результат: {result}")
        if input("Хотите решить еще один пример? (yes/no): ").lower() != "yes":
            break

Описание: 
Эта функция представляет собой базовый калькулятор, который поддерживает четыре арифметические операции:
сложение, вычитание, умножение и деление. Пользователь вводит два числа и оператор, программа выполняет расчет и
выводит результат. Цикл повторяется, пока пользователь не решит выйти.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 8: Функция week_days
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def week_days():
    days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
    index = 0
    while input(f"{days[index]}. Хотите увидеть следующий день? (yes/no): ").lower() == "yes":
        index = (index + 1) % len(days)

Описание: 
Функция циклически выводит дни недели. Каждый раз пользователю предлагается увидеть следующий день,
и, если ответ положительный, индекс увеличивается, позволяя перейти к следующему дню недели.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 9: Функция multiplication_table
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def multiplication_table():
    for i in range(2, 10):
        for j in range(1, 11):
            print(f"{i} * {j} = {i * j}")
        print()  # Добавляем пустую строку для разделения таблиц.

Описание: 
Функция выводит таблицу умножения от 2 до 9. Использует два вложенных цикла: внешний для чисел, на которые умножаем,
и внутренний для множителей от 1 до 10.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
Шаг № 10: Функция play_rock_paper_scissors
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
def play_rock_paper_scissors():
    choices = ["камень", "ножницы", "бумага"]
    while True:
        user_choice = input("Выберите камень, ножницы или бумагу: ").lower()
        if user_choice not in choices:
            print("Неверный ввод. Пожалуйста, выберите камень, ножницы или бумагу.")
            continue
        
        computer_choice = random.choice(choices)
        print(f"Компьютер выбрал: {computer_choice}")
        
        if user_choice == computer_choice:
            print("Ничья!")
        elif (user_choice == "камень" and computer_choice == "ножницы") or (user_choice == "ножницы" and
         computer_choice == "бумага") or (user_choice == "бумага" and computer_choice == "камень"):
            print("Вы победили!")
        else:
            print("Компьютер победил!")
        
        if input("Хотите сыграть еще раз? (yes/no): ").lower() != "yes":
            break

Описание: 
Игра "Камень, ножницы, бумага" против компьютера.
После выбора пользователя программа сравнивает его с случайным выбором компьютера и определяет победителя.
Цикл продолжается, пока пользователь не решит остановиться.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #