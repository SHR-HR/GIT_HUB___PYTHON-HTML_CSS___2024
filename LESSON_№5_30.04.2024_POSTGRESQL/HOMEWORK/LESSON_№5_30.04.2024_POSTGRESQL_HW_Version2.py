# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
"""""
–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–û–ú–ê–®–ù–ï–ô –†–ê–ë–û–¢–´: 29 –ê–ü–†–ï–õ–Ø 2024 –≥–æ–¥–∞.
"""""
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
                                              –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ

                                            –ö—É—Ä—Å: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python, —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –§—Ä–µ–π–º–≤–æ—Ä–∫–∞ Django
                                                                            –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –¢–µ–æ—Ä–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö. PostgreSQL

                                            –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ5:

                                        üëáüèª –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:

üëâüèª –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã admin –º–æ–≥ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è—Ç—å –ø–æ id –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
–£—Ä–æ–∫ –æ—Ç 30.04.2024
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
–í–∞—Ä–∏–∞–Ω—Ç –∫–æ–¥–∞ 2.
'''
import psycopg2
import secrets
import string

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
def generate_random_password(length=20):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(characters) for _ in range(length))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(connect):
    user_name = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
    user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

    with connect.cursor() as cur:
        cur.execute(f'SELECT user_id FROM users WHERE user_name = \'{user_name}\';')
        user = cur.fetchone()

        if user:
            print("–î–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!")
        elif len(user_password) < 8:
            print("–í–∞—à –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 8 —Å–∏–º–≤–æ–ª–æ–≤!")
        else:
            cur.execute(
                """
                INSERT INTO users (user_name, user_password, user_role) VALUES 
                (%s, %s, %s)
                """, (user_name, user_password, "user")
            )
            connect.commit()
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_super_user(connect):
    secret_word = input("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ: ")
    if secret_word == "—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ_—Å–ª–æ–≤–æ":
        super_user_name = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        super_user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")

        with connect.cursor() as cur:
            cur.execute(f'SELECT user_id FROM users WHERE user_name = \'{super_user_name}\';')
            user = cur.fetchone()

            if user:
                print("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            elif len(super_user_password) < 8:
                print("–ü–∞—Ä–æ–ª—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 8 —Å–∏–º–≤–æ–ª–æ–≤!")
            else:
                cur.execute(
                    """
                    INSERT INTO users (user_name, user_password, user_role) VALUES 
                    (%s, %s, %s)
                    """, (super_user_name, super_user_password, "superuser")
                )
                connect.commit()
                print("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    else:
        print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        register_user(connect)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authorize_user(connect):
    user_name = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
    user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

    with connect.cursor() as cur:
        cur.execute(
            """
            SELECT user_id, user_role FROM users WHERE user_name = %s AND user_password = %s
            """, (user_name, user_password)
        )
        user = cur.fetchone()

        if user:
            print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
            user_id, user_role = user
            if user_role == "superuser":
                superuser_actions(connect)
            else:
                user_actions(user_id, connect)
        else:
            print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def superuser_actions(connect):
    while True:
        action = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: 1 - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 2 - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 3 - –í—ã—Ö–æ–¥: ")

        if action == '1':
            view_users(connect)
        elif action == '2':
            delete_user(connect)
        elif action == '3':
            print("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            break
        else:
            print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def view_users(connect):
    with connect.cursor() as cur:
        cur.execute("SELECT user_id, user_name, user_role FROM users")
        users = cur.fetchall()
        print("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user in users:
            print(user)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user(connect):
    user_id = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    with connect.cursor() as cur:
        cur.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
        connect.commit()
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_actions(user_id, connect):
    print(f"–î–æ—Å—Ç—É–ø –∫ –¥–µ–π—Å—Ç–≤–∏—è–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
with psycopg2.connect(
        dbname="work_db",
        user="postgres",
        password="admin",
        host="localhost",
        port="5432",
) as connect:
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    with connect.cursor() as cur:
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS users
            (
                user_id serial PRIMARY KEY,
                user_name VARCHAR(100) UNIQUE NOT NULL,
                user_password VARCHAR(100),
                user_role VARCHAR(100) DEFAULT 'user',
                CONSTRAINT user_role_good CHECK (user_role IN ('user', 'superuser')),
                CONSTRAINT pass_len_check CHECK (LENGTH(user_password) >= 8)
            )
            """
        )
        connect.commit()

    # –í—ã–±–æ—Ä –º–µ–∂–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    action = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: 1 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, 2 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")

    if action == '1':
        register_user(connect)
    elif action == '2':
        register_super_user(connect)
    else:
        print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è.")

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    authorize_user(connect)
