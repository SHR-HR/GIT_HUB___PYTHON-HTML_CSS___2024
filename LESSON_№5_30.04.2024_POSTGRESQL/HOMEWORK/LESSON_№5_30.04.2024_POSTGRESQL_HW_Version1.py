# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
"""""
–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–û–ú–ê–®–ù–ï–ô –†–ê–ë–û–¢–´: 29 –ê–ü–†–ï–õ–Ø 2024 –≥–æ–¥–∞.
"""""
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
                                              –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ

                                            –ö—É—Ä—Å: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python, —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –§—Ä–µ–π–º–≤–æ—Ä–∫–∞ Django
                                                                            –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –¢–µ–æ—Ä–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö. PostgreSQL

                                            –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ5:

                                        üëáüèª –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:

üëâüèª –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã admin –º–æ–≥ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è—Ç—å –ø–æ id –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
–£—Ä–æ–∫ –æ—Ç 30.04.2024
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
–í–∞—Ä–∏–∞–Ω—Ç –∫–æ–¥–∞ 1.
'''


import psycopg2
import secrets
import string


def generate_random_password(length=20):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(characters) for _ in range(length))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authorize_user(connect):
    attempts = 3
    while attempts > 0:
        user_name = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
        user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

        with connect.cursor() as cur:
            cur.execute(
                """
                SELECT user_id FROM users WHERE user_name = %s AND user_password = %s
                """, (user_name, user_password)
            )
            user = cur.fetchone()

            if user:
                print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.")
                return True
            else:
                print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
                attempts -= 1
                print(f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts}")

        if attempts == 0:
            print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(connect):
    user_name = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
    user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")

    with connect.cursor() as cur:
        cur.execute(f'SELECT user_id FROM users WHERE user_name = \'{user_name}\';')
        user = cur.fetchone()

        if user:
            print("–î–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!")
        elif len(user_password) < 8:
            print("–í–∞—à –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ 8 —Å–∏–º–≤–æ–ª–æ–≤!")
        else:
            cur.execute(
                """
                INSERT INTO users (user_name, user_password) VALUES 
                (%s, %s)
                """, (user_name, user_password)
            )
            connect.commit()
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_super_user(connect):
    super_user_name = "super_user"
    super_user_password = generate_random_password()

    with connect.cursor() as cur:
        cur.execute(f'SELECT user_id FROM users WHERE user_name = \'{super_user_name}\';')
        user = cur.fetchone()

        if user:
            print("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            cur.execute(
                """
                INSERT INTO users (user_name, user_password, user_role) VALUES 
                (%s, %s, %s)
                """, (super_user_name, super_user_password, "admin")
            )
            connect.commit()
            print("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
            print("–í–∞—à –ø–∞—Ä–æ–ª—å:", super_user_password)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö ID
def list_all_users(connect):
    with connect.cursor() as cur:
        cur.execute("SELECT user_id, user_name FROM users")
        users = cur.fetchall()
        print("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user in users:
            print(f"ID: {user[0]}, –ò–º—è: {user[1]}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
def delete_user_by_id(connect, user_id):
    with connect.cursor() as cur:
        try:
            cur.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
            connect.commit()
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        except psycopg2.Error as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)
            connect.rollback()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def determine_user_role(user_name, connect):
    with connect.cursor() as cur:
        cur.execute("SELECT user_role FROM users WHERE user_name = %s", (user_name,))
        user_role = cur.fetchone()
        return user_role[0] if user_role else None


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
with psycopg2.connect(
        dbname="work_db",
        user="postgres",
        password="admin",
        host="localhost",
        port="5432",
) as connect:
    with connect.cursor() as cur:
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS users
            (
                user_id serial PRIMARY KEY,
                user_name VARCHAR(100) UNIQUE NOT NULL,
                user_password VARCHAR(100),
                user_role VARCHAR(100) DEFAULT 'guest',
                CONSTRAINT user_role_good CHECK (user_role IN ('admin', 'user', 'guest')),
                CONSTRAINT pass_len_chek CHECK (LENGTH(user_password) >= 8)
            )
            """
        )
        connect.commit()

    # –í—ã–±–æ—Ä –º–µ–∂–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    actions = {
        '1': authorize_user,
        '2': register_user,
    }

    action = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: 1 - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, 2 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ")

    if action in actions:
        actions[action](connect)
    else:
        print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è.")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    create_super_user(connect)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏: ")
    user_role = determine_user_role(user_name, connect)

    if user_role == 'admin':
        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        list_all_users(connect)

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id_to_delete = input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ")
        delete_user_by_id(connect, user_id_to_delete)
