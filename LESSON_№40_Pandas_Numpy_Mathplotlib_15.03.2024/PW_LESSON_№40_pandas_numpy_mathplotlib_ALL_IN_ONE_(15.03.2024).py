# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
"""""
Дата выполнения ПРАКТИЧЕСКОЙ РАБОТЫ: 16 МАРТА 2024 года.
"""""
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
                                            Практическая работа

                                            Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
                                                                         Дисциплина: Основы программирования на Python

                Практическая работа №40: Работа с большими данными - pandas, numpy, mathplotlib


                                            Выполните следующие задания:


                    Задание №1
                    а) Отобразите матрицу данных в виде графика.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Урок от 15.03.2024
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Вариант только 1
'''
import numpy as np
import matplotlib.pyplot as plt

# Создание матрицы данных (пример)
data_matrix = np.random.rand(10, 10)

# Отображение матрицы данных в виде графика
plt.imshow(data_matrix, cmap='viridis', interpolation='nearest')
plt.colorbar()  # Добавление цветовой шкалы
plt.title('Матрица данных')
plt.xlabel('Признак X')
plt.ylabel('Признак Y')
plt.show()
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
Шаг 1: Импорт необходимых библиотек
'''
import numpy as np
import matplotlib.pyplot as plt
"""
В этом шаге мы импортируем библиотеки NumPy и Matplotlib.
NumPy используется для работы с массивами данных, а Matplotlib - для создания графиков и визуализации данных.
"""
'''
Шаг 2: Создание случайной матрицы данных
'''
data_matrix = np.random.rand(10, 10)
"""
Мы создаем случайную матрицу данных размером 10x10 с помощью функции numpy.random.rand().
Эта функция генерирует массив заданной формы и заполняет его случайными значениями из равномерного распределения
на интервале [0, 1].
"""
'''
Шаг 3: Отображение матрицы данных в виде графика
'''
plt.imshow(data_matrix, cmap='viridis', interpolation='nearest')
"""
С помощью plt.imshow() мы отображаем матрицу данных в виде графика. 
Мы передаем ей data_matrix в качестве данных для отображения. 
Аргумент cmap='viridis' задает цветовую карту (цветовую схему) для отображения данных. 
В данном случае используется цветовая карта 'viridis', которая обеспечивает хорошее визуальное отображение данных. 
Аргумент interpolation='nearest' определяет метод интерполяции для отображения изображения. 
Здесь используется метод 'nearest', который подходит для отображения данных без изменения их между точками.
"""
'''
Шаг 4: Добавление цветовой шкалы
'''
plt.colorbar()
"""
plt.colorbar() добавляет цветовую шкалу к текущему графику.
Цветовая шкала помогает интерпретировать значения данных, соответствующие цветам на графике.
"""
'''
Шаг 5: Добавление заголовка графика
'''
plt.title('Матрица данных')
"""
plt.title('Матрица данных') устанавливает заголовок для графика. 
В данном случае заголовок установлен как 'Матрица данных'.
"""
'''
Шаг 6: Добавление подписей к осям X и Y
'''
plt.xlabel('Признак X')
plt.ylabel('Признак Y')
"""
plt.xlabel('Признак X') и plt.ylabel('Признак Y') устанавливают подписи для осей X и Y соответственно.
В данном случае ось X подписана как 'Признак X', а ось Y - как 'Признак Y'.
"""
'''
Шаг 7: Отображение графика
'''
plt.show()
"""
plt.show() выводит все предыдущие настройки графика и показывает его на экране.
"""
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
"""
В начале пути, на первых занятиях я же как-то делал подобное, думаю, Вы помните подобные задания, но без 
"дополнительного визуального контента".... Так вот, этот код создает график, на котором отображается случайно
сгенерированная матрица данных с цветовой шкалой и подписями к осям.
"""