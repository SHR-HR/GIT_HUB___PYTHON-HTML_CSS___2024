# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
"""""
Дата выполнения Домашней-Работы: 28 - ФЕВРАЛЯ - 29 ФЕВРАЛЯ 2024 года.
"""""
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Домашняя работа

Курс: Разработка Web-приложений на Python, с применением Фреймворка Django
Дисциплина: Основы программирования на Python

Домашняя работа №36: Парсинг данных. Библиотеки beatifulsoup4 и selenium

Выполните следующие задания:

Задание №1

а) Получить погоду в Астане с статического сайта погоды, используя string.split()
б) Получить погоду в Астане с статического сайта погоды, используя bs4
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Урок от 28.02.2024
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
Выполнение задания: a)
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
КОД:
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
import requests

def get_weather_with_split(url):
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        # Используйте split() для разделения текста страницы
        start_tag = '<span class="temp">'
        end_tag = '</span>'
        start_index = response.text.find(start_tag)
        end_index = response.text.find(end_tag, start_index + len(start_tag))

        temperature_info = response.text[start_index + len(start_tag):end_index]

        print(f"Текущая температура в Астане: {temperature_info}")

    except requests.exceptions.RequestException as e:
        print(f"Ошибка при запросе страницы {url}: {e}")

if __name__ == "__main__":
    accuweather_url = "https://www.accuweather.com/ru/kz/astana/222343/weather-forecast/222343"
    get_weather_with_split(accuweather_url)
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
"""
Первый раз, (с кодом из практической, которую делали на уроке) вышла вот такая ошибка 403.
Я погуглил, оказалось, что она означает, что сервер отклонил запрос.
И как я понял это может быть вызвано ограничениями доступа, например, если сервер не позволяет парсить свой контент.

Но, у меня ХОРОШИЙ УЧИТЕЛЬ!

И чтобы решить мне эту проблему, я попробовал использовать заголовки User-Agent в запросе, 
чтобы сделать его более похожим на запрос от браузера.
"""
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
'''
1. Импорт библиотек:
'''
import requests
'''
Здесь мы импортируем библиотеку requests, которая позволяет отправлять HTTP-запросы.
'''
'''
2. Определение функции get_weather_with_split:
'''
def get_weather_with_split(url):
''''
Эта функция принимает URL в качестве аргумента.
''''
'''
3. Попытка выполнения запроса:
'''
try:
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                             'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
    response = requests.get(url, headers=headers)
    response.raise_for_status()
'''
В этом блоке мы создаем заголовки с пользовательским агентом для имитации запроса от браузера.
Затем отправляем GET-запрос к указанному URL. raise_for_status() вызывается для проверки статуса ответа.
Если статус не является успешным (200 OK), генерируется исключение.
'''
'''
4. Использование split для извлечения температуры:
'''
start_tag = '<span class="temp">'
end_tag = '</span>'
start_index = response.text.find(start_tag)
end_index = response.text.find(end_tag, start_index + len(start_tag))

temperature_info = response.text[start_index + len(start_tag):end_index]
'''
Здесь мы используем метод find(), чтобы найти индексы начала и конца строки с тегами температуры. 
Затем мы используем эти индексы для извлечения информации о температуре из текста страницы и сохраняем ее в 
переменной temperature_info.
'''
'''
5. Вывод информации о температуре:
'''
print(f"Текущая температура в Астане: {temperature_info}")
'''
Наконец, мы выводим информацию о температуре.
'''
'''
6. Обработка исключений:
'''
except requests.exceptions.RequestException as e:
    print(f"Ошибка при запросе страницы {url}: {e}")
'''
В случае возникновения исключения (например, при ошибке запроса), мы выводим сообщение об ошибке.
'''
'''
7. Основная часть программы:
'''
if __name__ == "__main__":
    accuweather_url = "https://www.accuweather.com/ru/kz/astana/222343/weather-forecast/222343"
    get_weather_with_split(accuweather_url)
'''
Здесь мы проверяем, выполняется ли код как самостоятельная программа, и если да,
вызываем функцию get_weather_with_split с заданным URL.
'''
'''
В результате выполнения этого кода будет получена и выведена текущая температура в Астане с использованием метода split.
Но мне проще использовать BeautifulSoup как на уроке.
'''