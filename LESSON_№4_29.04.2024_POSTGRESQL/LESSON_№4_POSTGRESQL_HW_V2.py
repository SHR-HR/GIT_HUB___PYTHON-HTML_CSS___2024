# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
"""""
–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –î–û–ú–ê–®–ù–ï–ô –†–ê–ë–û–¢–´: 29 –ê–ü–†–ï–õ–Ø 2024 –≥–æ–¥–∞.
"""""
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
                                              –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ

                                            –ö—É—Ä—Å: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python, —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –§—Ä–µ–π–º–≤–æ—Ä–∫–∞ Django
                                                                            –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: –¢–µ–æ—Ä–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö. PostgreSQL

                                            –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ4:

                                        üëáüèª –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:

üëâüèª 1. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. 
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–Ω–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–¥–∞–ª–∏—Ç—å,
–∏ —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

üëâüèª 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–æ–ª–∏. 
–°–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

üëâüèª 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è: –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ,
—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è –∏ –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å 
(–Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∏ –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤).

üëâüèª 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è: –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å,
–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å `secrets` –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
–ö–æ–¥ –∏–∑ –∞—Ä—Ö–∏–≤–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é:
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #

import psycopg2


with psycopg2.connect(
    dbname="lesson_third",
    user="postgres",
    password="admin",
    host="localhost",
    port="5432",
) as connect:
    # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
    with connect.cursor() as cur:
        cur.execute(
            """
                    CREATE TABLE IF NOT EXISTS users 
                    (
                        user_id SERIAL PRIMARY KEY,
                        username VARCHAR(100) UNIQUE NOT NULL,
                        password VARCHAR(100)
                    )
                    """
        )
        connect.commit()

    # –î–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞
    with connect.cursor() as cur:
        user_name = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
        user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        try:
            cur.execute(
                f"""
                INSERT INTO users (username, password) VALUES 
                ('{user_name}', '{user_password}')
                        """
            )
            connect.commit()
        except psycopg2.errors.UniqueViolation as error:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        finally:
            connect.rollback()

    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤
    with connect.cursor() as cur:
        cur.execute("SELECT * FROM users")
        users = cur.fetchall()
        for user in users:
            print(f"Name {user[1]}, password {len(user[2])}")

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    with connect.cursor() as cur:
        for _ in range(3):
            login = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω: ")
            password = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: ")
            cur.execute(
                f"""
                        SELECT username, password FROM users
                        WHERE username = '{login}' AND password = '{password}'
                """
            )
            user = cur.fetchone()
            if not user:
                print("–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                continue

            print("–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")
            break
            
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
'''
–£—Ä–æ–∫ –æ—Ç 29.04.2024
'''
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ #
import psycopg2
import hashlib
import string
import secrets

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def check_password_strength(password):
    if len(password) < 8:
        return False
    if not any(char.isupper() for char in password):
        return False
    if not any(char.islower() for char in password):
        return False
    if not any(char.isdigit() for char in password):
        return False
    if not any(char in string.punctuation for char in password):
        return False
    return True

def generate_random_password(length=20):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(characters) for _ in range(length))

try:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connect = psycopg2.connect(
        dbname="LESSON_‚Ññ4_29.04.2024_POSTGRESQL",
        user="postgres",
        password="admin",
        host="localhost",
        port="5432",
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if connect:
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.")

    with connect.cursor() as cur:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cur.execute("SELECT * FROM users")
        users = cur.fetchall()
        if not users:
            print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            print("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in users:
                print(user)

        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1 - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 2 - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, 3 - –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å): ")
            if choice == '1':
                user_name = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω: ")
                user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                if not user_password:
                    user_password = generate_random_password()
                    print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å:", user_password)
                while not check_password_strength(user_password):
                    print("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π. –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
                    user_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
                hashed_password = hash_password(user_password)
                cur.execute(
                    """
                    INSERT INTO users (username, password)
                    VALUES (%s, %s)
                    RETURNING user_id
                    """, (user_name, hashed_password)
                )
                user_id = cur.fetchone()[0]
                products_data = [
                    ("–ú–æ–ª–æ–∫–æ", 2),
                    ("–•–ª–µ–±", 1),
                    ("–Ø–π—Ü–∞", 6),
                    ("–ú–∞—Å–ª–æ", 1),
                    ("–°—ã—Ä", 2)
                ]
                cur.executemany(
                    """
                    INSERT INTO products (user_id, name, quantity)
                    VALUES (%s, %s, %s)
                    """, [(user_id, name, quantity) for name, quantity in products_data]
                )
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                break

            elif choice == '2':
                cur.execute("SELECT * FROM users")
                users = cur.fetchall()
                if not users:
                    print("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                    break
                print("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
                for user in users:
                    print(user)
                username_to_delete = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ")
                cur.execute(
                    """
                    DELETE FROM users
                    WHERE username = %s
                    """, (username_to_delete,)
                )
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                break

            elif choice == '3':
                login = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω: ")
                old_password = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: ")
                new_password = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ")
                hashed_old_password = hash_password(old_password)
                hashed_new_password = hash_password(new_password)
                cur.execute(
                    """
                    UPDATE users
                    SET password = %s
                    WHERE username = %s AND password = %s
                    """, (hashed_new_password, login, hashed_old_password)
                )
                if cur.rowcount == 0:
                    print("–ù–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                else:
                    print("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                break

            else:
                print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–æ–≤–∞.")

except psycopg2.Error as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)
finally:
    if connect:
        connect.close()
